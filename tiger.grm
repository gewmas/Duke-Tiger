structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  decs of A.exp list | dec of A.exp
          | tydec of A.exp | ty of A.exp | tyfields of A.exp | type_id of A.exp
          | vardec of A.exp
          | fundec of A.exp
          | exps of A.exp | exp of A.exp | recordExp of A.exp | arrayExp of A.exp
          | lvalue of A.exp
          | oper of A.oper | arithmeticOper of A.oper | comparisonOper of A.oper | booleanOper of A.oper 
          | recordList of A.exp

%start dec

%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%pos int
%verbose
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
  DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

decs : dec (dec::nil)
    | dec decs (dec::decs)
    |   (nil)
dec : tydec (tydec)
    | vardec (vardec)
    | fundec (fundec)

tydec : TYPE type_id EQ ty (A.NilExp)
ty : type_id (A.NilExp)
    | LBRACE tyfields RBRACE (A.NilExp)
    | ARRAY OF type_id (A.NilExp)
tyfields :  (A.NilExp)
          | ID COLON type_id (A.NilExp)
          | tyfields COMMA tyfields (A.NilExp)
type_id : INT (A.NilExp)
        | STRING (A.NilExp)
        | ID (A.NilExp)

vardec : VAR ID ASSIGN exp (A.NilExp)
      | VAR ID COLON type_id ASSIGN exp (A.NilExp)

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp (A.NilExp)
      | FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ exp (A.NilExp)

exps : exp (A.NilExp)
    | exp SEMICOLON exps (A.NilExp)
    | exp COMMA exps (A.NilExp)
    | (A.NilExp)

oper : arithmeticOper (arithmeticOper)
      | comparisonOper (comparisonOper)
      | booleanOper (booleanOper)

arithmeticOper : TIMES   (A.TimesOp)
              | DIVIDE    (A.DivideOp)
              | PLUS   (A.PlusOp)
              | MINUS   (A.MinusOp)
              
comparisonOper : EQ    (A.EqOp)
              | NEQ   (A.NeqOp)
              | GT    (A.GtOp)
              | LT    (A.LtOp)
              | GE    (A.GeOp)
              | LE    (A.LeOp)

booleanOper : AND (A.GtOp)
              | OR (A.GtOp)

lvalue : ID                         (A.NilExp)
        | lvalue DOT ID             (A.NilExp)
        | lvalue LBRACK exp RBRACK  (A.NilExp)

exp : LET decs IN exps END              (A.NilExp)
    | lvalue                            (A.NilExp)
    | NIL                               (A.NilExp)
    | LPAREN exp SEMICOLON exps RPAREN  (A.NilExp)
    |                                   (A.NilExp)
    | INT                               (A.NilExp)
    | STRING                            (A.NilExp)
    | ID LPAREN RPAREN                  (A.NilExp)
    | ID LPAREN exps RPAREN             (A.NilExp)
    | exp oper exp                      (exp)
    | MINUS exp %prec UMINUS            (A.NilExp)
    | STRING comparisonOper STRING      (A.NilExp)
    | recordExp                         (A.NilExp)
    | arrayExp                          (A.NilExp)
    | lvalue ASSIGN exp                 (A.NilExp)
    | IF exp THEN exp ELSE exp          (A.NilExp)
    | IF exp THEN exp                   (A.NilExp)
    | WHILE exp DO exp                  (A.NilExp)
    | FOR exp TO exp DO exp             (A.NilExp)
    | BREAK                             (A.NilExp)
    | LPAREN exp RPAREN                 (A.NilExp)

recordList : ID EQ exp                    (A.NilExp)
            | recordList COMMA recordList (A.NilExp)
            |                             (A.NilExp)

recordExp : type_id LBRACE recordList RBRACE  (A.NilExp)
arrayExp : type_id LBRACK exp RBRACK OF exp   (A.NilExp)




