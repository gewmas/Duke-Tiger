structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  decs of A.dec list | dec of A.dec
          | tydec of A.dec | ty of A.ty | tyfields of A.field list | type_id of A.symbol
          | vardec of A.dec
          | fundec of A.dec
          | exps of A.exp list | letExps of (A.exp * A.pos) list | exp of A.exp | startExp of A.exp | recordExp of A.exp | arrayExp of A.exp | evalExp of A.exp
          | lvalue of A.var
          | oper of A.oper | arithmeticOper of A.oper | comparisonOper of A.oper  
          | recordList of (A.symbol * A.exp * A.pos) list
          | matchedIfThenElseExp of A.exp | unmatchedIfThenElseExp of A.exp
          | notIfThenElseExp of A.exp | ifThenElseExp of A.exp

%start startExp

%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left OR AND
%left UMINUS

%pos int
%verbose
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
  DO OF NIL

%prefer THEN ELSE LPAREN


%%

decs : dec                                                          (dec::nil)
    | dec decs                                                      (dec::decs)
dec : tydec                                                         (tydec)
    | vardec                                                        (vardec)
    | fundec                                                        (fundec)

tydec : TYPE type_id EQ ty                                          (A.TypeDec([{name=type_id, ty=ty, pos=TYPEleft}]))

ty : type_id                                                        (A.NameTy(type_id, type_idleft))
    | LBRACE tyfields RBRACE                                        (A.RecordTy(tyfields))
    | ARRAY OF type_id                                              (A.ArrayTy(type_id, ARRAYleft))

tyfields :                                                          ([])
          | ID COLON type_id                                        ([{name=Symbol.symbol(ID), escape=ref false, typ=type_id, pos=IDleft}])
          | ID COLON type_id  COMMA tyfields                        ({name=Symbol.symbol(ID), escape=ref false, typ=type_id, pos=IDleft}::tyfields)

type_id : STRING                                                    (Symbol.symbol(STRING))
  

vardec : VAR ID ASSIGN exp                                          (A.VarDec({name=Symbol.symbol(ID), escape=ref false, typ=NONE, init=exp, pos=VARleft}))
      | VAR ID COLON type_id ASSIGN exp                             (A.VarDec({name=Symbol.symbol(ID), escape=ref false, typ=SOME((type_id, type_idleft)), init=exp, pos=VARleft}))


fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp                  (A.FunctionDec([{name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}]))
      | FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ exp     (A.FunctionDec([{name=Symbol.symbol(ID), params=tyfields, result=SOME((type_id, type_idleft)), body=exp, pos=FUNCTIONleft}]))




exps : exp                                                          (exp::nil)
    | exp SEMICOLON exps                                            (exp::exps)
    | exp COMMA exps                                                (exp::exps)

letExps : exp                                                       ((exp, expleft)::nil)
        | exp SEMICOLON letExps                                     ((exp, expleft)::letExps)

                                  
oper : arithmeticOper                                               (arithmeticOper)
      | comparisonOper                                              (comparisonOper)

arithmeticOper : TIMES                                              (A.TimesOp)         
              | DIVIDE                                              (A.DivideOp)
              | PLUS                                                (A.PlusOp)
              | MINUS                                               (A.MinusOp)
                                    
comparisonOper : EQ                                                 (A.EqOp)
              | NEQ                                                 (A.NeqOp)
              | GT                                                  (A.GtOp)
              | LT                                                  (A.LtOp)
              | GE                                                  (A.GeOp)
              | LE                                                  (A.LeOp)
                                            
                      
lvalue : ID                                                         (A.SimpleVar(Symbol.symbol(ID) , IDleft))
        | lvalue DOT ID                                             (A.FieldVar(lvalue, Symbol.symbol("a") , lvalueleft))
        | lvalue LBRACK exp RBRACK                                  (A.SubscriptVar(lvalue, exp , lvalueleft))
                      
evalExp : exp oper exp                                              (A.OpExp({left=exp1, oper=oper, right=exp2, pos=exp1left}))
        | exp AND exp                                               (A.IfExp({test=exp1, then'= exp2, else'= SOME(A.IntExp(0)), pos=exp1left}))
        | exp OR exp                                                (A.IfExp({test=exp1, then'= A.IntExp(1), else'= SOME(exp2), pos=exp1left}))

startExp : exp                                                      (exp)

exp : 
    ifThenElseExp                                                   (ifThenElseExp)


notIfThenElseExp : LET decs IN letExps END                          (A.LetExp({decs=decs, body=A.SeqExp(letExps), pos=LETleft}))
    | lvalue                                                        (A.VarExp(lvalue))
    | NIL                                                           (A.NilExp)
    | LPAREN exp SEMICOLON letExps RPAREN                           (A.SeqExp((exp, LPARENleft)::letExps))
    | INT                                                           (A.IntExp(INT))
    | STRING                                                        (A.StringExp(STRING, STRINGleft))
    | ID LPAREN RPAREN                                              (A.CallExp({func=Symbol.symbol(ID), args=[], pos=IDleft}))
    | ID LPAREN exps RPAREN                                         (A.CallExp({func=Symbol.symbol(ID), args=exps, pos=IDleft}))
    | MINUS exp %prec UMINUS                                        (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
    | recordExp                                                     (recordExp)
    | arrayExp                                                      (arrayExp)
    | lvalue ASSIGN evalExp                                         (A.AssignExp({var=lvalue, exp=evalExp, pos=lvalueleft}))
    | WHILE exp DO exp                                              (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
    | FOR ID ASSIGN evalExp TO evalExp DO exp                       (A.ForExp({var=Symbol.symbol(ID), escape=ref false, lo=evalExp1, hi=evalExp2, body=exp, pos=FORleft}))
    | BREAK                                                         (A.BreakExp(BREAKleft))
    | LPAREN exp RPAREN                                             (exp)

ifThenElseExp : matchedIfThenElseExp                                (matchedIfThenElseExp)
              | unmatchedIfThenElseExp                              (unmatchedIfThenElseExp)


matchedIfThenElseExp : IF evalExp THEN matchedIfThenElseExp ELSE matchedIfThenElseExp 
                                                                    (A.IfExp({test=evalExp, then'=matchedIfThenElseExp1, else'=SOME(matchedIfThenElseExp2), pos= IFleft}))
                      | notIfThenElseExp                            (notIfThenElseExp)
unmatchedIfThenElseExp : IF evalExp THEN exp                        (A.IfExp({test=evalExp, then'=exp, else'=NONE, pos= IFleft}))
                        | IF evalExp THEN matchedIfThenElseExp ELSE unmatchedIfThenElseExp 
                                                                    (A.IfExp({test=evalExp, then'=matchedIfThenElseExp, else'=SOME(unmatchedIfThenElseExp), pos= IFleft}))                      
                      
recordExp : type_id LBRACE recordList RBRACE                        (A.RecordExp({fields=recordList, typ=type_id, pos=type_idleft}))
arrayExp : type_id LBRACK evalExp RBRACK OF evalExp                 (A.ArrayExp({typ=type_id, size=evalExp1, init=evalExp2, pos=type_idleft}))

recordList : ID EQ exp                                              ([(Symbol.symbol(ID), exp, IDleft)])
            | ID EQ exp COMMA recordList                            ((Symbol.symbol(ID), exp, IDleft)::recordList)
